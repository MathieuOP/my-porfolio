{"version":3,"sources":["components/Input.js","components/SuggestionList.js","store/types.js","store/actions.js","containers/SuggestionList.js","components/Search.js","containers/Search.js","components/App.js","serviceWorker.js","store/selectors.js","store/reducer.js","store/ajaxMiddleware.js","store/index.js","index.js"],"names":["Input","onChange","type","value","autoComplete","placeholder","onFocus","className","SuggestionList","updateInputStartValue","localName","uniqueName","cityId","onClick","e","currentTarget","textContent","handleClickCity","receivedDataOnChangeInputStart","data","types","receivedDataOnChangeInputArrived","receivedDataPopularCities","city","heightArrow","connect","dispatch","actions","Search","inputStartValue","inputArrivedValue","suggestionsCities","onChangeInputStart","onChangeInputArrived","focusInputStart","focusInputArrived","inputStartIsFocus","searchIsActive","getPopularCities","useEffect","deleteAndAddClassInInputActive","parentNode","childNodes","forEach","element","input","children","classList","remove","add","minWidthForDisplayArrow","useMediaQuery","query","offsetTop","length","style","top","map","index","unique_name","local_name","city_id","selected","key","state","suggestionPopularCities","App","Boolean","window","location","hostname","match","addPropertySelectedToData","arrData","d","cityStartId","cityArrivedId","initialState","popularCites","resultSearchCitiesStart","resultSearchCitiesArrived","inputArrivedIsFocus","reducer","action","selectors","updateData","ajaxMiddleware","store","next","axios","get","then","getState","dataForSearch","toLowerCase","appliedMiddlewares","applyMiddleware","compose","__REDUX_DEVTOOLS_EXTENSION__","createStore","rootComponent","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16e3d27b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'; \r\nimport './style/Input.scss';\r\n\r\nconst Input = ({ \r\n  onChange,\r\n  type, \r\n  value, \r\n  autoComplete, \r\n  placeholder, \r\n  onFocus,\r\n  className\r\n}) => {\r\n\r\n  return (\r\n    <input \r\n      onChange={onChange}\r\n      type={type}\r\n      value={value}\r\n      autoComplete={autoComplete}\r\n      placeholder={placeholder}\r\n      onFocus={onFocus}\r\n      className={className}\r\n    />\r\n  );\r\n}\r\n\r\nInput.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  autoComplete: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  onFocus: PropTypes.func.isRequired,\r\n  className: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport './style/SuggestionList.scss';\r\nimport PropTypes from 'prop-types'; \r\nimport { FaMapMarkerAlt } from  'react-icons/fa';\r\n\r\nconst SuggestionList = ({ \r\n    updateInputStartValue,\r\n    localName, \r\n    uniqueName,\r\n    className,\r\n    cityId\r\n}) => {\r\n    \r\n    const handleClickCity = (uniqueName, cityId) => (e) => {\r\n        updateInputStartValue(e.currentTarget.textContent, uniqueName, cityId);\r\n    }\r\n\r\n    return (\r\n        <li \r\n            className={className} \r\n            onClick={handleClickCity(uniqueName, cityId)}\r\n        >\r\n            <FaMapMarkerAlt className=\"search__marker\"/> { localName }\r\n        </li>\r\n    )\r\n};\r\n\r\nSuggestionList.propTypes = {\r\n    updateInputStartValue: PropTypes.func.isRequired,\r\n    localName: PropTypes.string.isRequired,\r\n    uniqueName: PropTypes.string.isRequired,\r\n    className: PropTypes.string.isRequired,\r\n    cityId: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default SuggestionList;","const UPDATE_INPUT_START_VALUE = 'UPDATE_INPUT_START_VALUE';\r\nconst ON_CHANGE_INPUT_START = 'ON_CHANGE_INPUT_START';\r\nconst RECEIVED_DATA_ON_CHANGE_INPUT_START = 'RECEIVED_DATA_ON_CHANGE_INPUT_START';\r\nconst ON_CHANGE_INPUT_ARRIVED = 'ON_CHANGE_INPUT_ARRIVED';\r\nconst RECEIVED_DATA_ON_CHANGE_INPUT_ARRIVED = 'RECEIVED_DATA_ON_CHANGE_INPUT_ARRIVED';\r\nconst FOCUS_INPUT_START = 'FOCUS_INPUT_START';\r\nconst RECEIVED_DATA_FOCUS_INPUT_START = 'RECEIVED_DATA_FOCUS_INPUT_START';\r\nconst FOCUS_INPUT_ARRIVED = 'FOCUS_INPUT_ARRIVED';\r\nconst RECEIVED_DATA_FOCUS_INPUT_ARRIVED = 'RECEIVED_DATA_FOCUS_INPUT_ARRIVED';\r\n\r\nconst GET_POPULAR_CITIES = 'GET_POPULAR_CITIES';\r\nconst RECEIVED_DATA_POPULAR_CITIES = 'RECEIVED_DATA_POPULAR_CITIES';\r\n\r\nexport default {\r\n    UPDATE_INPUT_START_VALUE,\r\n    ON_CHANGE_INPUT_START,\r\n    RECEIVED_DATA_ON_CHANGE_INPUT_START,\r\n    ON_CHANGE_INPUT_ARRIVED,\r\n    RECEIVED_DATA_ON_CHANGE_INPUT_ARRIVED,\r\n    FOCUS_INPUT_START,\r\n    RECEIVED_DATA_FOCUS_INPUT_START,\r\n    FOCUS_INPUT_ARRIVED,\r\n    RECEIVED_DATA_FOCUS_INPUT_ARRIVED,\r\n    GET_POPULAR_CITIES,\r\n    RECEIVED_DATA_POPULAR_CITIES\r\n}","import types from './types';\r\n\r\nexport const updateInputStartValue = (city, uniqueName, cityId) => ({\r\n    type: types.UPDATE_INPUT_START_VALUE,\r\n    city,\r\n    uniqueName,\r\n    cityId\r\n});\r\n\r\nexport const onChangeInputStart = (value) => ({\r\n    type: types.ON_CHANGE_INPUT_START,\r\n    value,\r\n});\r\n\r\nexport const receivedDataOnChangeInputStart = (data) => ({\r\n    type: types.RECEIVED_DATA_ON_CHANGE_INPUT_START,\r\n    data,\r\n});\r\n\r\nexport const onChangeInputArrived = (value) => ({\r\n    type: types.ON_CHANGE_INPUT_ARRIVED,\r\n    value,\r\n});\r\n\r\nexport const receivedDataOnChangeInputArrived = (data) => ({\r\n    type: types.RECEIVED_DATA_ON_CHANGE_INPUT_ARRIVED,\r\n    data,\r\n});\r\n\r\nexport const focusInputStart = (heightArrow) => ({\r\n    type: types.FOCUS_INPUT_START,\r\n    heightArrow\r\n});\r\n\r\nexport const receivedDataFocusInputStart = (data) => ({\r\n    type: types.RECEIVED_DATA_FOCUS_INPUT_START,\r\n    data,\r\n}); \r\n\r\nexport const focusInputArrived = (heightArrow) => ({\r\n    type: types.FOCUS_INPUT_ARRIVED,\r\n    heightArrow\r\n});\r\n\r\nexport const receivedDataFocusInputArrived = (data) => ({\r\n    type: types.RECEIVED_DATA_FOCUS_INPUT_ARRIVED,\r\n    data,\r\n});\r\n\r\nexport const getPopularCities = () => ({\r\n    type: types.GET_POPULAR_CITIES,\r\n});\r\n\r\nexport const receivedDataPopularCities = (data) => ({\r\n    type: types.RECEIVED_DATA_POPULAR_CITIES,\r\n    data,\r\n});\r\n\r\nexport default {\r\n    updateInputStartValue,\r\n    onChangeInputStart,\r\n    receivedDataOnChangeInputStart,\r\n    onChangeInputArrived,\r\n    receivedDataOnChangeInputArrived,\r\n    focusInputStart,\r\n    receivedDataFocusInputStart,\r\n    focusInputArrived,\r\n    receivedDataFocusInputArrived,\r\n    getPopularCities,\r\n    receivedDataPopularCities\r\n}","import { connect } from 'react-redux';\r\nimport SuggestionList from '../components/SuggestionList';\r\n\r\n// Action Creators\r\nimport actions from '../store/actions';\r\n\r\nconst mapStateToProps = null;\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateInputStartValue: (city, uniqueName, cityId) => {\r\n    dispatch(actions.updateInputStartValue(city, uniqueName, cityId))\r\n  }\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SuggestionList);","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types'; \r\nimport { useMediaQuery } from 'react-responsive'\r\nimport './style/Search.scss';\r\nimport Input from './Input';\r\nimport SuggestionList from '../containers/SuggestionList';\r\n\r\nconst Search = ({\r\n  inputStartValue,\r\n  inputArrivedValue,\r\n  suggestionsCities,\r\n  onChangeInputStart,\r\n  onChangeInputArrived,\r\n  focusInputStart,\r\n  focusInputArrived,\r\n  heightArrow,\r\n  inputStartIsFocus,\r\n  searchIsActive,\r\n  getPopularCities\r\n}) => {\r\n\r\n  useEffect(() => {\r\n    getPopularCities();\r\n  }, [getPopularCities]);\r\n  \r\n  const deleteAndAddClassInInputActive = (e) => {\r\n    const parentInputElement = e.currentTarget.parentNode.parentNode.childNodes;\r\n\r\n    parentInputElement.forEach(element => {\r\n      const input = element.children[0];\r\n      if (input.value === '') input.classList.remove('search__input--active');\r\n    });\r\n\r\n    e.currentTarget.classList.add('search__input--active');\r\n  }\r\n\r\n  const handleChangeInputStart = (e) => {\r\n    const inputStartValue = e.currentTarget.value;\r\n    onChangeInputStart(inputStartValue);\r\n  }\r\n\r\n  const handleChangeInputArrived = (e) => {\r\n    const inputArrivedValue = e.currentTarget.value;\r\n    onChangeInputArrived(inputArrivedValue);\r\n  }\r\n\r\n  const handleFocusInputStart = (e) => {\r\n    deleteAndAddClassInInputActive(e)\r\n    focusInputStart(e.currentTarget.offsetTop);\r\n  }\r\n\r\n  const handleFocusInputArrived = (e) => {\r\n    deleteAndAddClassInInputActive(e);\r\n    focusInputArrived(e.currentTarget.offsetTop);\r\n  }\r\n\r\n  const minWidthForDisplayArrow = useMediaQuery({ query: '(min-width: 992px)' })\r\n\r\n  return (\r\n      <div className=\"search\">\r\n        <div className=\"search__container\">\r\n          <div className=\"search__title\"> Quel est votre itinéraire ? </div>\r\n          <form>\r\n            <div className=\"search__section\">\r\n              <Input \r\n                onChange={handleChangeInputStart}\r\n                type=\"text\"\r\n                value={inputStartValue}\r\n                autoComplete=\"off\"\r\n                placeholder=\"Saississez une ville de départ\"\r\n                onFocus={handleFocusInputStart}\r\n                className=\"search__input\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"search__section\">\r\n              <Input \r\n                onChange={handleChangeInputArrived}\r\n                type=\"text\"\r\n                value={inputArrivedValue}\r\n                autoComplete=\"off\"\r\n                placeholder=\"Saississez une ville d'arrivé\"\r\n                onFocus={handleFocusInputArrived}\r\n                className=\"search__input\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        <div className=\"search__suggestion\">\r\n          {\r\n            (suggestionsCities.length === 0 && searchIsActive) && (\r\n              <div> Aucune ville trouvée </div>\r\n            )\r\n          }\r\n          \r\n          {\r\n              suggestionsCities.length > 0 && (\r\n                <>\r\n                  {\r\n                    minWidthForDisplayArrow && (\r\n                      <div className=\"search__arrow\" style={{top: heightArrow}}/>\r\n                    )\r\n                  }\r\n                  \r\n                  <div className=\"search__title\"> Choisissez une gare { inputStartIsFocus ? 'de départ' : 'd\\'arrivée'} ? </div>\r\n                    <ul className=\"search__list\">\r\n                    {\r\n                      suggestionsCities.map(({ unique_name, local_name, city_id, selected }, index) => {\r\n                        return (\r\n                          <SuggestionList \r\n                              key={`${city_id}-index:${index}`}\r\n                              localName={local_name}\r\n                              uniqueName={unique_name}\r\n                              cityId={city_id}\r\n                              className={selected ? 'search__city search__city--selected' : 'search__city'}\r\n                          />\r\n                        )\r\n                      })\r\n                    }\r\n                  </ul>\r\n                </>\r\n              )\r\n          }\r\n        </div> \r\n      </div>\r\n  );\r\n}\r\n\r\nSearch.propTypes = {\r\n  inputStartValue: PropTypes.string.isRequired,\r\n  inputArrivedValue: PropTypes.string.isRequired,\r\n  suggestionsCities: PropTypes.arrayOf(PropTypes.object),\r\n  onChangeInputStart: PropTypes.func.isRequired,\r\n  onChangeInputArrived: PropTypes.func.isRequired,\r\n  focusInputStart: PropTypes.func.isRequired,\r\n  focusInputArrived: PropTypes.func.isRequired,\r\n  heightArrow: PropTypes.number.isRequired,\r\n  inputStartIsFocus: PropTypes.bool.isRequired,\r\n  searchIsActive: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default Search;\r\n","import { connect } from 'react-redux';\r\nimport Search from '../components/Search';\r\n\r\n// Action Creators\r\nimport actions from '../store/actions';\r\n\r\nconst mapStateToProps = state => ({\r\n  inputStartValue: state.inputStartValue,\r\n  inputArrivedValue: state.inputArrivedValue,\r\n  suggestionsCities: state.suggestionsCities,\r\n  suggestionPopularCities: state.suggestionPopularCities,\r\n  heightArrow: state.heightArrow,\r\n  inputStartIsFocus: state.inputStartIsFocus,\r\n  searchIsActive: state.searchIsActive,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChangeInputStart: (value) => {\r\n      dispatch(actions.onChangeInputStart(value))\r\n    },\r\n    onChangeInputArrived: (value) => {\r\n      dispatch(actions.onChangeInputArrived(value))\r\n    },\r\n    focusInputStart: (heightArrow) => {\r\n      dispatch(actions.focusInputStart(heightArrow))\r\n    },\r\n    focusInputArrived: (heightArrow) => {\r\n      dispatch(actions.focusInputArrived(heightArrow))\r\n    },\r\n    getPopularCities: () => {\r\n      dispatch(actions.getPopularCities());\r\n    }\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Search);","import React from 'react';\nimport './style/App.scss';\nimport Search from '../containers/Search';\n\nconst App = () => {\n\n  return (\n    <div className=\"app\">\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const addPropertySelectedToData = (arrData) => (\r\n    arrData.map((d, index) => {\r\n        if (index === 0) {\r\n            return {\r\n                ...d,\r\n                selected: true,\r\n            }\r\n        }\r\n\r\n        return {\r\n            ...d,\r\n            selected: false,\r\n        }\r\n    })\r\n);\r\n\r\nexport const addSelectedTrueToCityStart = (arrData, state) => (\r\n    arrData.map((data) => {\r\n        if (data.city_id === state.cityStartId) {\r\n            return {\r\n                ...data,\r\n                selected: true,\r\n            }\r\n        }\r\n\r\n        return {\r\n            ...data,\r\n            selected: false,\r\n        }\r\n    })\r\n);\r\n\r\nexport const addSelectedTrueToCityArrived = (arrData, state) => (\r\n    arrData.map((data) => {\r\n        if (data.city_id === state.cityArrivedId) {\r\n            return {\r\n                ...data,\r\n                selected: true,\r\n            }\r\n        }\r\n\r\n        return {\r\n            ...data,\r\n            selected: false,\r\n        }\r\n    })\r\n);\r\n\r\nexport default {\r\n    addPropertySelectedToData,\r\n    addSelectedTrueToCityStart,\r\n    addSelectedTrueToCityArrived\r\n};","import types from './types';\r\nimport selectors from './selectors';\r\n\r\nconst initialState = {\r\n    suggestionsCities: [],\r\n    popularCites: [],\r\n    resultSearchCitiesStart: [],\r\n    resultSearchCitiesArrived: [],\r\n    inputStartValue: '',\r\n    inputArrivedValue: '',\r\n    inputStartIsFocus: false,\r\n    inputArrivedIsFocus: false,\r\n    uniqueName: '',\r\n    cityStartId: '',\r\n    cityArrivedId: '',\r\n    heightArrow: 0,\r\n    searchIsActive: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action = {}) => {\r\n    switch (action.type) {\r\n         case types.RECEIVED_DATA_POPULAR_CITIES:\r\n            return {\r\n                ...state,\r\n                popularCites: [ ...action.data ],\r\n            }\r\n        case types.UPDATE_INPUT_START_VALUE:\r\n            return {\r\n                ...state,\r\n                inputStartValue: state.inputStartIsFocus ? action.city : state.inputStartValue,\r\n                inputArrivedValue: state.inputArrivedIsFocus ? action.city : state.inputArrivedValue,\r\n                resultSearchCitiesStart: state.inputStartIsFocus ? state.suggestionsCities : state.resultSearchCitiesStart,\r\n                resultSearchCitiesArrived: state.inputArrivedIsFocus ? state.suggestionsCities : state.resultSearchCitiesArrived,\r\n                uniqueName: state.inputStartIsFocus ? action.uniqueName : '',\r\n                suggestionsCities: state.suggestionsCities.map(city => {\r\n                    if (city.city_id === action.cityId) {\r\n                        return {\r\n                            ...city,\r\n                            selected: true,\r\n                        }\r\n                    }\r\n\r\n                    return {\r\n                        ...city,\r\n                        selected: false,\r\n                    }\r\n                }),\r\n                cityStartId: state.inputStartIsFocus ? action.cityId : state.cityStartId,\r\n                cityArrivedId: state.inputArrivedIsFocus ? action.cityId : state.cityArrivedId,\r\n                \r\n            }\r\n        case types.ON_CHANGE_INPUT_START:\r\n            return {\r\n                ...state,\r\n                inputStartValue: action.value,\r\n                uniqueName: '',\r\n                cityStartId: ''\r\n            }\r\n        case types.RECEIVED_DATA_ON_CHANGE_INPUT_START:\r\n            return {\r\n                ...state,\r\n                suggestionsCities: [ ...action.data ],\r\n                resultSearchCitiesStart: [ ...action.data ],\r\n            }\r\n        case types.ON_CHANGE_INPUT_ARRIVED:\r\n            return {\r\n                ...state,\r\n                inputArrivedValue: action.value,\r\n                cityArrivedId: '',\r\n            }\r\n        case types.RECEIVED_DATA_ON_CHANGE_INPUT_ARRIVED:\r\n            return {\r\n                ...state,\r\n                suggestionsCities: [ ...action.data ],\r\n                resultSearchCitiesArrived: [ ...action.data ],\r\n            }\r\n        case types.FOCUS_INPUT_START:\r\n            return {\r\n                ...state,\r\n                inputStartIsFocus: true,\r\n                inputArrivedIsFocus: false,\r\n                suggestionsCities: (state.inputStartValue !== '') ? \r\n                selectors.addSelectedTrueToCityStart(state.resultSearchCitiesStart, state) : \r\n                state.popularCites,\r\n                heightArrow: action.heightArrow,\r\n                searchIsActive: true\r\n            }\r\n        case types.FOCUS_INPUT_ARRIVED: \r\n            return {\r\n                ...state,\r\n                inputArrivedIsFocus: true,\r\n                inputStartIsFocus: false,\r\n                suggestionsCities: (state.inputStartValue !== '' & state.inputArrivedValue === '') ? action.updateData :\r\n                (state.inputArrivedValue !== '') ? selectors.addSelectedTrueToCityArrived(state.resultSearchCitiesArrived, state) : \r\n                state.popularCites,\r\n                heightArrow: action.heightArrow,\r\n                searchIsActive: true\r\n            }\r\n        // case types.RECEIVED_DATA_FOCUS_INPUT_ARRIVED:\r\n        //     return {\r\n        //         ...state,\r\n        //         suggestionsCities: action.data,\r\n        //     }\r\n        default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import types from './types';\r\nimport { \r\n    receivedDataOnChangeInputStart,\r\n    receivedDataOnChangeInputArrived,\r\n    receivedDataPopularCities\r\n} from './actions';\r\nimport { addPropertySelectedToData } from './selectors';\r\nimport axios from 'axios';\r\n\r\n\r\nconst ajaxMiddleware = store => next => action => {\r\n    switch (action.type) {\r\n        case types.GET_POPULAR_CITIES:\r\n            next(action);\r\n\r\n            return axios.get('https://api.tictactrip.eu/cities/popular/5')\r\n                .then(({ data }) => {\r\n                    const updateData = addPropertySelectedToData(data);\r\n                    store.dispatch(receivedDataPopularCities(updateData));\r\n                });\r\n        case types.ON_CHANGE_INPUT_START:\r\n            next(action);\r\n            return axios.get(`https://api.tictactrip.eu/cities/autocomplete/?q=${action.value}`)\r\n                .then(({ data }) => {\r\n                    const updateData = addPropertySelectedToData(data);\r\n\r\n                    store.dispatch(receivedDataOnChangeInputStart(updateData));\r\n                });\r\n        case types.ON_CHANGE_INPUT_ARRIVED:\r\n            next(action)\r\n            return  axios.get(`https://api.tictactrip.eu/cities/autocomplete/?q=${action.value}`)\r\n                .then(({ data }) => {\r\n                    const updateData = addPropertySelectedToData(data);\r\n\r\n                    store.dispatch(receivedDataOnChangeInputArrived(updateData));\r\n                });\r\n        case types.FOCUS_INPUT_ARRIVED:\r\n            const { inputStartValue, inputArrivedValue, uniqueName } = store.getState();\r\n            const dataForSearch = uniqueName !== '' ? uniqueName : inputStartValue;\r\n        \r\n            if ((inputStartValue === '' && inputArrivedValue === '') || (inputArrivedValue !== '' && inputStartValue !== '') || dataForSearch === '') {\r\n                next(action);\r\n                return;\r\n            }\r\n        \r\n            return axios.get(`https://api.tictactrip.eu/cities/popular/from/${dataForSearch.toLowerCase()}/5`)\r\n                .then(({ data }) => {\r\n                const updateData = addPropertySelectedToData(data);\r\n                next({\r\n                    ...action,\r\n                    updateData,\r\n                });\r\n            });\r\n        default:\r\n            return next(action);\r\n    }\r\n};\r\n\r\nexport default ajaxMiddleware;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport reducer from './reducer';\r\nimport ajaxMiddleware from './ajaxMiddleware';\r\n\r\nconst appliedMiddlewares = applyMiddleware(ajaxMiddleware);\r\n\r\n// createStore\r\nconst enhancers = compose(\r\n  appliedMiddlewares,\r\n  // eslint-disable-next-line no-underscore-dangle\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  process.env.NODE_ENV === 'development' ? enhancers : appliedMiddlewares\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\n// store\nimport store from './store';\n\nconst rootComponent = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(rootComponent, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}